#!/usr/bin/env python3
"""
Teste da funcionalidade corrigida de exclus√£o de convidados
"""

from app import create_app
from app.models import db, Convidado, Presente, EscolhaPresente

def criar_convidado_teste():
    """Criar um convidado de teste com escolhas de presentes"""
    
    # Criar convidado de teste
    import uuid
    teste = Convidado(
        nome='Jo√£o Teste Exclus√£o', 
        telefone='11987654321',
        token=str(uuid.uuid4())
    )
    db.session.add(teste)
    db.session.commit()
    
    print(f"‚úÖ Convidado criado: ID {teste.id} - {teste.nome}")
    
    # Adicionar escolhas de presentes
    presentes_disponiveis = Presente.query.filter_by(disponivel=True).limit(2).all()
    
    if len(presentes_disponiveis) < 2:
        print("‚ùå N√£o h√° presentes dispon√≠veis suficientes para o teste")
        return None
    
    escolhas_criadas = []
    for presente in presentes_disponiveis:
        escolha = EscolhaPresente(convidado_id=teste.id, presente_id=presente.id)
        presente.disponivel = False
        db.session.add(escolha)
        escolhas_criadas.append(presente.nome)
    
    db.session.commit()
    
    print(f"‚úÖ {len(escolhas_criadas)} escolhas adicionadas:")
    for nome in escolhas_criadas:
        print(f"   - {nome}")
    
    return teste.id

def testar_exclusao(convidado_id):
    """Testar a exclus√£o do convidado"""
    
    print(f"\nüîç Testando exclus√£o do convidado ID {convidado_id}")
    
    # Verificar estado antes
    convidado = Convidado.query.get(convidado_id)
    if not convidado:
        print("‚ùå Convidado n√£o encontrado")
        return False
    
    escolhas_antes = EscolhaPresente.query.filter_by(convidado_id=convidado_id).all()
    print(f"üìã Estado antes da exclus√£o:")
    print(f"   - Convidado: {convidado.nome}")
    print(f"   - Escolhas: {len(escolhas_antes)}")
    
    presentes_escolhidos = []
    for escolha in escolhas_antes:
        presente = Presente.query.get(escolha.presente_id)
        if presente:
            presentes_escolhidos.append({
                'nome': presente.nome,
                'disponivel_antes': presente.disponivel
            })
            print(f"   - Presente: {presente.nome} (Dispon√≠vel: {presente.disponivel})")
    
    # Simular a fun√ß√£o de exclus√£o corrigida
    try:
        # Liberar presentes
        presentes_liberados = []
        for escolha in escolhas_antes:
            presente = Presente.query.get(escolha.presente_id)
            if presente:
                presente.disponivel = True
                presentes_liberados.append(presente.nome)
        
        # Excluir escolhas
        EscolhaPresente.query.filter_by(convidado_id=convidado_id).delete()
        
        # Excluir convidado
        db.session.delete(convidado)
        db.session.commit()
        
        print(f"\n‚úÖ Exclus√£o realizada com sucesso!")
        print(f"   - Convidado '{convidado.nome}' exclu√≠do")
        print(f"   - {len(presentes_liberados)} presentes liberados:")
        for nome in presentes_liberados:
            print(f"     ‚Ä¢ {nome}")
        
        # Verificar se foi realmente exclu√≠do
        verificacao = Convidado.query.get(convidado_id)
        if verificacao is None:
            print(f"‚úÖ Confirmado: convidado foi completamente removido do banco")
        else:
            print(f"‚ùå Erro: convidado ainda existe no banco")
            return False
        
        # Verificar se presentes foram liberados
        for info in presentes_escolhidos:
            presente = Presente.query.filter_by(nome=info['nome']).first()
            if presente and presente.disponivel:
                print(f"‚úÖ Presente '{presente.nome}' liberado corretamente")
            else:
                print(f"‚ùå Erro: presente '{info['nome']}' n√£o foi liberado")
        
        return True
        
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Erro durante exclus√£o: {str(e)}")
        return False

def main():
    """Fun√ß√£o principal do teste"""
    
    app = create_app()
    with app.app_context():
        print("üß™ TESTE DA FUNCIONALIDADE DE EXCLUS√ÉO CORRIGIDA")
        print("=" * 50)
        
        # Criar convidado de teste
        convidado_id = criar_convidado_teste()
        
        if convidado_id:
            # Testar exclus√£o
            sucesso = testar_exclusao(convidado_id)
            
            if sucesso:
                print(f"\nüéâ TESTE CONCLU√çDO COM SUCESSO!")
                print("A funcionalidade de exclus√£o est√° funcionando corretamente.")
                print("- Convidados s√£o exclu√≠dos sem violar constraints")
                print("- Presentes s√£o automaticamente liberados")
                print("- Relacionamentos s√£o tratados adequadamente")
            else:
                print(f"\n‚ùå TESTE FALHOU!")
                print("H√° problemas na funcionalidade de exclus√£o.")
        else:
            print("‚ùå N√£o foi poss√≠vel criar o convidado de teste")

if __name__ == '__main__':
    main()
